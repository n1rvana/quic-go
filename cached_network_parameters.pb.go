// Code generated by protoc-gen-go.
// source: cached_network_parameters.proto
// DO NOT EDIT!

/*
Package quic is a generated protocol buffer package.

It is generated from these files:
	cached_network_parameters.proto
	source_address_token.proto

It has these top-level messages:
	CachedNetworkParameters
	SourceAddressToken
	SourceAddressTokens
*/
package quic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Describes the state of the connection during which the supplied network
// parameters were calculated.
type CachedNetworkParameters_PreviousConnectionState int32

const (
	CachedNetworkParameters_SLOW_START           CachedNetworkParameters_PreviousConnectionState = 0
	CachedNetworkParameters_CONGESTION_AVOIDANCE CachedNetworkParameters_PreviousConnectionState = 1
)

var CachedNetworkParameters_PreviousConnectionState_name = map[int32]string{
	0: "SLOW_START",
	1: "CONGESTION_AVOIDANCE",
}
var CachedNetworkParameters_PreviousConnectionState_value = map[string]int32{
	"SLOW_START":           0,
	"CONGESTION_AVOIDANCE": 1,
}

func (x CachedNetworkParameters_PreviousConnectionState) Enum() *CachedNetworkParameters_PreviousConnectionState {
	p := new(CachedNetworkParameters_PreviousConnectionState)
	*p = x
	return p
}
func (x CachedNetworkParameters_PreviousConnectionState) String() string {
	return proto.EnumName(CachedNetworkParameters_PreviousConnectionState_name, int32(x))
}
func (x *CachedNetworkParameters_PreviousConnectionState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CachedNetworkParameters_PreviousConnectionState_value, data, "CachedNetworkParameters_PreviousConnectionState")
	if err != nil {
		return err
	}
	*x = CachedNetworkParameters_PreviousConnectionState(value)
	return nil
}
func (CachedNetworkParameters_PreviousConnectionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

// CachedNetworkParameters contains data that can be used to choose appropriate
// connection parameters (initial RTT, initial CWND, etc.) in new connections.
// Next id: 8
type CachedNetworkParameters struct {
	// serving_region is used to decide whether or not the bandwidth estimate and
	// min RTT are reasonable and if they should be used.
	// For example a group of geographically close servers may share the same
	// serving_region string if they are expected to have similar network
	// performance.
	ServingRegion *string `protobuf:"bytes,1,opt,name=serving_region" json:"serving_region,omitempty"`
	// The server can supply a bandwidth estimate (in bytes/s) which it may re-use
	// on receipt of a source-address token with this field set.
	BandwidthEstimateBytesPerSecond *int32 `protobuf:"varint,2,opt,name=bandwidth_estimate_bytes_per_second" json:"bandwidth_estimate_bytes_per_second,omitempty"`
	// The maximum bandwidth seen to the client, not necessarily the latest.
	MaxBandwidthEstimateBytesPerSecond *int32 `protobuf:"varint,5,opt,name=max_bandwidth_estimate_bytes_per_second" json:"max_bandwidth_estimate_bytes_per_second,omitempty"`
	// Timestamp (seconds since UNIX epoch) that indicates when the max bandwidth
	// was seen by the server.
	MaxBandwidthTimestampSeconds *int64 `protobuf:"varint,6,opt,name=max_bandwidth_timestamp_seconds" json:"max_bandwidth_timestamp_seconds,omitempty"`
	// The min RTT seen on a previous connection can be used by the server to
	// inform initial connection parameters for new connections.
	MinRttMs *int32 `protobuf:"varint,3,opt,name=min_rtt_ms" json:"min_rtt_ms,omitempty"`
	// Encodes the PreviousConnectionState enum.
	PreviousConnectionState *int32 `protobuf:"varint,4,opt,name=previous_connection_state" json:"previous_connection_state,omitempty"`
	// UNIX timestamp when this bandwidth estimate was created.
	Timestamp        *int64 `protobuf:"varint,7,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CachedNetworkParameters) Reset()                    { *m = CachedNetworkParameters{} }
func (m *CachedNetworkParameters) String() string            { return proto.CompactTextString(m) }
func (*CachedNetworkParameters) ProtoMessage()               {}
func (*CachedNetworkParameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CachedNetworkParameters) GetServingRegion() string {
	if m != nil && m.ServingRegion != nil {
		return *m.ServingRegion
	}
	return ""
}

func (m *CachedNetworkParameters) GetBandwidthEstimateBytesPerSecond() int32 {
	if m != nil && m.BandwidthEstimateBytesPerSecond != nil {
		return *m.BandwidthEstimateBytesPerSecond
	}
	return 0
}

func (m *CachedNetworkParameters) GetMaxBandwidthEstimateBytesPerSecond() int32 {
	if m != nil && m.MaxBandwidthEstimateBytesPerSecond != nil {
		return *m.MaxBandwidthEstimateBytesPerSecond
	}
	return 0
}

func (m *CachedNetworkParameters) GetMaxBandwidthTimestampSeconds() int64 {
	if m != nil && m.MaxBandwidthTimestampSeconds != nil {
		return *m.MaxBandwidthTimestampSeconds
	}
	return 0
}

func (m *CachedNetworkParameters) GetMinRttMs() int32 {
	if m != nil && m.MinRttMs != nil {
		return *m.MinRttMs
	}
	return 0
}

func (m *CachedNetworkParameters) GetPreviousConnectionState() int32 {
	if m != nil && m.PreviousConnectionState != nil {
		return *m.PreviousConnectionState
	}
	return 0
}

func (m *CachedNetworkParameters) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*CachedNetworkParameters)(nil), "quic.CachedNetworkParameters")
	proto.RegisterEnum("quic.CachedNetworkParameters_PreviousConnectionState", CachedNetworkParameters_PreviousConnectionState_name, CachedNetworkParameters_PreviousConnectionState_value)
}

var fileDescriptor0 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0xce, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xc6, 0xf1, 0xb7, 0x5f, 0xaf, 0xf4, 0x2c, 0x4a, 0x1d, 0xc4, 0x8e, 0xab, 0x6a, 0x5d, 0x54,
	0x10, 0xf4, 0x1a, 0x62, 0x2c, 0x5a, 0x90, 0xa4, 0x98, 0xa0, 0xcb, 0xc3, 0x34, 0x39, 0xb4, 0x83,
	0xcc, 0x4c, 0x9c, 0x99, 0xb6, 0x7a, 0x85, 0xde, 0x96, 0xd3, 0x58, 0x02, 0xee, 0xdc, 0xff, 0x7f,
	0x0f, 0x0f, 0x8c, 0x0b, 0x51, 0xac, 0xa9, 0x44, 0x4d, 0x7e, 0x67, 0xec, 0x1b, 0x56, 0xc2, 0x0a,
	0x45, 0x9e, 0xac, 0xbb, 0xa9, 0xac, 0xf1, 0x86, 0x75, 0xdf, 0x37, 0xb2, 0x98, 0x7c, 0xb5, 0x61,
	0x14, 0xd7, 0x65, 0xf2, 0x13, 0x2e, 0x9a, 0x8e, 0x9d, 0xc2, 0xc0, 0x91, 0xdd, 0x4a, 0xbd, 0x42,
	0x4b, 0x2b, 0x69, 0x34, 0x6f, 0x9d, 0xb7, 0xae, 0xfa, 0xec, 0x1a, 0x2e, 0x97, 0x42, 0x97, 0x3b,
	0x59, 0xfa, 0x35, 0x92, 0xf3, 0x52, 0x09, 0x4f, 0xb8, 0xfc, 0xf4, 0xe4, 0xb0, 0x22, 0x8b, 0x8e,
	0x0a, 0xa3, 0x4b, 0xde, 0x0e, 0x71, 0x8f, 0xdd, 0xc2, 0x54, 0x89, 0x0f, 0xfc, 0x0b, 0xe8, 0xd5,
	0x60, 0x0a, 0xe3, 0xdf, 0x20, 0xe4, 0xc1, 0x08, 0x55, 0x1d, 0x3a, 0xc7, 0xff, 0x87, 0xb0, 0xc3,
	0x18, 0x80, 0x92, 0x1a, 0xad, 0xf7, 0xa8, 0x1c, 0xef, 0xd4, 0xf8, 0x02, 0xce, 0x2a, 0x4b, 0x5b,
	0x69, 0x36, 0x0e, 0x43, 0xab, 0xa9, 0xf0, 0xe1, 0x37, 0x06, 0xee, 0x89, 0x77, 0xeb, 0xe4, 0x18,
	0xfa, 0xcd, 0x22, 0x3f, 0xda, 0x2f, 0x4d, 0x62, 0x18, 0x2d, 0x0e, 0x2a, 0x6e, 0x50, 0xb6, 0x37,
	0x6c, 0x00, 0x90, 0x3d, 0xa5, 0xaf, 0x98, 0xe5, 0xd1, 0x73, 0x3e, 0xfc, 0xc7, 0x38, 0x9c, 0xc4,
	0x69, 0xf2, 0x30, 0xcb, 0xf2, 0x79, 0x9a, 0x60, 0xf4, 0x92, 0xce, 0xef, 0xa3, 0x24, 0x9e, 0x0d,
	0x5b, 0x77, 0xed, 0xc7, 0xce, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x48, 0xee, 0x34, 0x75,
	0x01, 0x00, 0x00,
}
